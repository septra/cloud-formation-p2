Description: >
  Server instances, Security Group and Load Balancer definitions

Resources:
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      Description: Allow read from S3 Bucket
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group definition for the Load Balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VpcId"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

  EC2WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group definition for the EC2 application servers
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WebAppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y
          apt install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "Everything working!" > index.html
      ImageId: ami-0ac73f33a1888c64a
      SecurityGroups:
        - Ref: EC2WebServerSecurityGroup
      InstanceType: t3.small
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"

  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-Private-Subnets"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfiguration
      MinSize: "2"
      MaxSize: "4"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-Public-Subnet1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-Public-Subnet2"
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      LoadBalancerArn:
        Ref: WebAppLoadBalancer
      Port: "80"
      Protocol: HTTP

  LoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 10
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VpcId"

Outputs:
    LoadBalancerURL:
        Description: Public Load Balancer Domain Name
        Value: !GetAtt WebAppLoadBalancer.DNSName
